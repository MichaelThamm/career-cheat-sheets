Summary:

This is a sheet made for useful git commands. Make sure git is installed on your computer, otherwise follow this instruction video:
https://www.youtube.com/watch?v=J_Clau1bYco


Using Git:

1) open cmd.exe with administrator priviliges
2) cd to correct directory where you want to allow version control
	Note: '<drive letter>:' to change drives
3) Throw the .gitignore file in the root of the git init folder found
	Note: good gitignore repo - https://github.com/github/gitignore
	
To Git clone with token code:
git clone https://<username>:<githubtoken>@github.com/<username>/<repositoryname>.git
Set remote:
git remote set-url origin https://MichaelThamm@github.com/MichaelThamm/Flask-Docker.git
git remote set-url origin https://<githubtoken>@github.com/<username>/<repositoryname>.git
Set credentials:
git config credential.helper store

# Useful commands
ls						- list files in cwd
git remote add origin <GitHub repo url>		- Create a remote repo
git remote set-url origin <NEW_URL>		- change the remote destination
git remote rm <name>				- removes remote repo
git ls-remote					- list of all remote branches
git init 					- enable version control at the current working directory (cwd)
rm -rf .git					- removes the git init file (undoes git init)
git status					- commit status
git status --short				- whats new
git branch -a					- lists all local and remote branches (doesn't always show all remote branches)
git branch					- lists the branches of the local repo
git branch -r					- lists the branches of the remote repo
git branch -m <name>				- rename the branch name
git branch <name>				- creates a new local branch
git branch -d <name>				- delete branch locally
git push origin --delete <name>			- delete branch remotely
git checkout <branch>				- changes the active branch
	* If you are trying to pull a remote branch but don't see it with any git branch commands, just git checkout <branch>
git checkout -b myFeature dev			- Creates a branch from a branch 
git clone <GitHub repo url>			- clones an entire repo
git pull					- pulls the remote branch equivalent of the current local branch
git pull origin <branch name>			- 
git add <filename>				- add versioning
git add .					- adds / stages all of the files in the current directory
git add -A					- adds / stages all files in the git dir
git commit -m "Message"				- commit file with message
git commit -am 'message'			- adds and commits together
git reset <file>				- removes from staging before commit
git reset					- removes everything from staging
git reset HEAD~3				- uncommit last 3 commits
git rm --cached <file>				- untracks file
git rm -r --cached <folder>			- untrack folder
git push					- pushes local branch to remote
git push origin HEAD:main -f			- push the local to remote (named main) with -f force flag
git push --set-upstream origin <branch name>	- Simultaneously sets the upstream branch and pushes the branch contents to the remote repository.
git merge <branch>				- merges the current branch to the branch in the 
git mergetool					- parses all merge conflicts and lets the user decide the corrective action
command
git log						- log
git gui						- opens a GUI!
gitk						- visualizes the branches

# For help
git help --all					- all commands
git <command> -help				- help for specific command
NOTE: to get out of the help menu enter 'q'


___EXAMPLES___

# Compare local to remote branches
git fetch					- This will fetch all of the remote branches
git diff <local> <remote>/<branch>		- git diff main origin/main


# Branch from another branch, and commit
git checkout -b myFeature dev			- Creates MyFeature branch off dev. Do your work and then
git commit -am "<Your message>"			- Now merge your changes to dev without a fast-forward
git checkout dev				- Now merge without fast-forward since we want to keep the original branch as HEAD
git merge --no-ff myFeature			- Now push changes to the server
git push origin dev
git push origin myFeature


# Finished with a remote branch
git push origin --delete <name>			- Delete the remote branch
git fetch origin -p				- Update your local repository references to "prune" the obsolete remote-tracking branch:

# Remove Git history
If you want to delete all your commit history but keep the code in its current state, it is very safe to do it as in the following:
PS: this will not keep your old commit history around

- git checkout --orphan latest_branch
- git add -A
- git commit -am "commit message"
- git branch -D main
- git branch -m main
- git push -f origin main
